Start -> Program
Program -> Decl Program
Program -> Decl
Decl -> Type ident ;
Decl -> FRoot ident ( Formals ) StmtBlock
Decl -> const CnsTp ident ;
Decl -> class ident Heritage { FieldP }
Decl -> interface ident { Proto }
Type -> CnsTp
Type -> ident
Type -> Type []
FRoot -> void
FRoot -> Type
Formals -> Type ident , Formals
Formals -> Type ident
StmtBlock -> { SBPV SBPC SBPS }
CnsTp -> int
CnsTp -> double
CnsTp -> bool
CnsTp -> string
Heritage -> : ident HeritageP
Heritage -> ''
HeritageP -> , ident HeritageP
HeritageP -> ''
FieldP -> Field FieldP
FieldP -> ''
Field -> Type ident ;
Field -> FRoot ident ( Formals ) StmtBlock
Field -> const CnsTp ident ;
Proto -> Prototype Proto
Proto -> ''
Prototype -> FRoot ident ( Formals ) ;
SBPV -> Type ident ; SBPV
SBPV -> ''
SBPC -> const CnsTp ident ; SBPC
SBPC -> ''
SBPS -> Stmt SBPS
SBPS -> ''
Stmt -> Expr ;
Stmt -> ;
Stmt -> if ( Expr ) Stmt ElseStmt
Stmt -> while ( Expr ) Stmt
Stmt -> for ( Expr ; Expr ; Expr ) Stmt
Stmt -> break ;
Stmt -> return Expr ;
Stmt -> System . out . println ( Expr ExPrint ) ;
Stmt -> StmtBlock
ElseStmt -> else Stmt
ElseStmt -> ''
ExPrint -> , Expr ExPrint
ExPrint -> ''
Expr -> ident = ExprOr
Expr -> ExprOr
ExprOr -> ExprOr != ExprOrP
ExprOr -> ExprOrP
ExprOrP -> ExprOrP || ExprAnd
ExprOrP -> ExprAnd
ExprAnd -> ExprAnd > ExprAndP
ExprAnd -> ExprAnd >= ExprAndP
ExprAnd -> ExprAndP
ExprAndP -> ExprAndP - ExprEquals
ExprAndP -> ExprEquals
ExprEquals -> ExprEquals / ExprEqualsP
ExprEquals -> ExprEquals % ExprEqualsP
ExprEquals -> ExprEqualsP
ExprEqualsP -> - ExprComp
ExprEqualsP -> ! ExprComp
ExprEqualsP -> ExprComp
ExprComp -> ExprComp . ident = ExprCompP
ExprComp -> ExprComp . ident
ExprComp -> ExprCompP
ExprCompP -> ( Expr )
ExprCompP -> this
ExprCompP -> ident
ExprCompP -> New ( ident )
ExprCompP -> intConstant
ExprCompP -> doubleConstant
ExprCompP -> boolConstant
ExprCompP -> stringConstant
ExprCompP -> null